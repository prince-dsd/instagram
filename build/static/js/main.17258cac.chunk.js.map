{"version":3,"sources":["components/Carousel/CarouselStyles.js","components/data.js","components/Carousel/Carousel.jsx","App.js","serviceWorker.js","index.js"],"names":["InstagramStory","styled","div","LeftArrow","BsFillCaretLeftFill","RightArrow","BsFillCaretRightFill","ImageContainer","UserImage","img","attrs","image","src","userList","userid","url","Carousel","useState","leftArraow","setLeftArrow","rightArrow","setRightArrow","slider1","useRef","settingsSliderNav","dots","arrows","infinite","initialSlide","slidesToShow","slidesToScroll","speed","afterChange","currentSlide","length","setArrowDisplay","onClick","current","slickPrev","slickNext","ref","map","user","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4yCAGO,IAAMA,EAAiBC,IAAOC,IAAV,KAQdC,EAAYF,YAAOG,IAAPH,CAAH,KAWTI,EAAaJ,YAAOK,IAAPL,CAAH,KAWVM,EAAiBN,IAAOC,IAAV,KAWdM,EAAYP,IAAOQ,IAAIC,OAAM,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CAAEC,IAAI,GAAD,OAAKD,MAA3CV,CAAH,KC5CTY,EAAW,CACtB,CAAEC,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,EAAGC,IAAK,iCAClB,CAAED,OAAQ,GAAIC,IAAK,iCACnB,CAAED,OAAQ,GAAIC,IAAK,iCACnB,CAAED,OAAQ,GAAIC,IAAK,iCACnB,CAAED,OAAQ,GAAIC,IAAK,kCC8CNC,EA9CE,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACdC,EADc,KACFC,EADE,OAEeF,oBAAS,GAFxB,mBAEdG,EAFc,KAEFC,EAFE,KAIfC,EAAUC,mBAcVC,EAAoB,CACxBC,MAAM,EACNC,QAAQ,EACRC,UAAU,EACVC,aAAc,EACdC,aAAc,EACdC,eAAgB,EAChBC,MAAO,IAEPC,YAAa,SAACC,GAAD,OArBS,SAACA,GACvBd,EAA8B,IAAjBc,GACbZ,EACEY,IAAiBpB,EAASqB,OAASV,EAAkBK,cAkBxBM,CAAgBF,KAGjD,OACE,kBAACjC,EAAD,KACGkB,GAAc,kBAACf,EAAD,CAAWiC,QAjBb,WACfd,EAAQe,QAAQC,eAiBblB,GAAc,kBAACf,EAAD,CAAY+B,QArBlB,WACXd,EAAQe,QAAQE,eAsBd,kBAAC,IAAD,eAAQC,IAAKlB,GAAaE,GACvBX,EAAS4B,KAAI,SAACC,EAAMC,GAAP,OACZ,kBAACpC,EAAD,CAAgBqC,IAAKD,GACnB,kBAACnC,EAAD,CAAWG,MAAO+B,EAAK3B,aCxCpB8B,EARH,WACV,OACE,oCACE,kBAAC,EAAD,QCOcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17258cac.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { BsFillCaretLeftFill, BsFillCaretRightFill } from \"react-icons/bs\";\n\nexport const InstagramStory = styled.div`\n  position: relative;\n  width: 60vw;\n  height: 100px;\n  margin: 20px auto;\n  background: #fff;\n  border: 1px solid #eee;\n`;\nexport const LeftArrow = styled(BsFillCaretLeftFill)`\n  position: absolute;\n  left: 0;\n  top: 32px;\n  z-index: 5;\n  font-size: 24px;\n  color : #ccc;\n  cursor : pointer;\n  border : 3px solid #eee;\n  border-radius : 50%;\n`;\nexport const RightArrow = styled(BsFillCaretRightFill)`\n  position: absolute;\n  right: 0;\n  top: 32px;\n  z-index: 5;\n  color : #ccc;\n  font-size: 24px;\n  cursor : pointer;\n  border : 3px solid #eee;\n  border-radius : 50%;\n`;\nexport const ImageContainer = styled.div`\n  display: flex;\n  justify-content : center;\n  align-items : center;\n  height: 100px;\n  width: 60px;\n  padding : 5px;\n  &:hover{\n  opacity : 0.7;\n  }\n`;\nexport const UserImage = styled.img.attrs(({ image }) => ({ src: `${image}` }))`\n  object-fit: cover;\n  width: 60%;\n  height: 100%;\n  border-radius: 50%;\n`;\n","export const userList = [\n  { userid: 1, url: \"https://picsum.photos/400/300\" },\n  { userid: 2, url: \"https://picsum.photos/500/300\" },\n  { userid: 4, url: \"https://picsum.photos/200/300\" },\n  { userid: 5, url: \"https://picsum.photos/900/300\" },\n  { userid: 6, url: \"https://picsum.photos/600/300\" },\n  { userid: 7, url: \"https://picsum.photos/800/600\" },\n  { userid: 8, url: \"https://picsum.photos/700/400\" },\n  { userid: 9, url: \"https://picsum.photos/500/200\" },\n  { userid: 10, url: \"https://picsum.photos/100/300\" },\n  { userid: 11, url: \"https://picsum.photos/200/600\" },\n  { userid: 12, url: \"https://picsum.photos/450/400\" },\n  { userid: 13, url: \"https://picsum.photos/576/200\" },\n];\n","import React, { useState, useRef } from \"react\";\nimport Slider from \"react-slick\";\n\nimport {\n  LeftArrow,\n  RightArrow,\n  InstagramStory,\n  ImageContainer,\n  UserImage,\n} from \"./CarouselStyles\";\nimport { userList } from \"../data\";\n\nconst Carousel = () => {\n  const [leftArraow, setLeftArrow] = useState(false);\n  const [rightArrow, setRightArrow] = useState(true);\n\n  const slider1 = useRef();\n\n  const setArrowDisplay = (currentSlide) => {\n    setLeftArrow(currentSlide !== 0);\n    setRightArrow(\n      currentSlide !== userList.length - settingsSliderNav.slidesToShow\n    );\n  };\n  const next = () => {\n    slider1.current.slickNext();\n  };\n  const previous = () => {\n    slider1.current.slickPrev();\n  };\n  const settingsSliderNav = {\n    dots: false,\n    arrows: false,\n    infinite: false,\n    initialSlide: 0,\n    slidesToShow: 5,\n    slidesToScroll: 4,\n    speed: 500,\n\n    afterChange: (currentSlide) => setArrowDisplay(currentSlide),\n  };\n\n  return (\n    <InstagramStory>\n      {leftArraow && <LeftArrow onClick={previous} />}\n      {rightArrow && <RightArrow onClick={next} />}\n\n      <Slider ref={slider1} {...settingsSliderNav}>\n        {userList.map((user, index) => (\n          <ImageContainer key={index}>\n            <UserImage image={user.url} />\n          </ImageContainer>\n        ))}\n      </Slider>\n    </InstagramStory>\n  );\n};\n\nexport default Carousel;\n","import React from \"react\";\nimport Carousel from \"./components/Carousel/Carousel\";\nconst App = () => {\n  return (\n    <>\n      <Carousel />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}